import {Posts, Comments} from '../db/dbConnector.js'

/**
* GraphQL Resolvers 
**/

export const resolvers={
    Query:{
            getAllPost:(root)=>{
                return new Promise((resolve,reject)=>{
                    Posts.find((err,posts)=>{
                        if(err) reject(err);
                        else resolve(posts);
                    }).populate('comments')
                })
            },
            getPostById: (root, {postId})=>{
                const post = Posts.findById(postId).populate('comments').exec()
                return post;
            }
    },
    Mutation:{
        createPost: (root, {postInput}) => {
            const newPost = new Posts({
                title: postInput.title,
                details: postInput.details,
                comments: postInput.comments
            })

            newPost.id = newPost._id

            return new Promise((resolve, reject) => {
                newPost.save((err) => {
                    if(err) reject (err)
                    else resolve (newPost)
                })
            })
        },
        createComment: (root, {commentInput}) => {
            const newComment = new Comments({
                postId: commentInput.postId,
                commentor: commentInput.commentor,
                commentDetails: commentInput.commentDetails
            })

            newComment.id = newComment._id

            return new Promise((resolve, reject) => {
                newComment.save((err) => {
                    if(err) reject (err)
                    else{
                        console.log(commentInput.postId)
                        Posts.findById(commentInput.postId)
                        .then((post) => {
                            post.comments.push(newComment.id)
                            post.save()
                        })
                        resolve (newComment)
                    } 
                })
            })
        },
        deletePost:async (root, {postId}) => {
            try {
                await Posts.findByIdAndDelete(postId)
                await Comments.deleteMany({"postId": postId})
                return true
            }
            catch (err) {
                return false
            }
        },
        updatePost: async (root, {postId,updatedDetails}) => {
            try {
                console.log(postId, updatedDetails)
                await Posts.findByIdAndUpdate(postId,{
                    details: updatedDetails.details
                })
                return true
            } catch(err) {
                return false
            }
        }
    }
};